<?php/** * Newletter Module for Zikula * * @copyright ï¿½ 2001-2010, Devin Hayes (aka: InvalidReponse), Dominik Mayer (aka: dmm), Robert Gasch (aka: rgasch) * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html */ class Newsletter_Controller_Admin extends Zikula_AbstractController{    public function main()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::modifyconfig', '::', ACCESS_ADMIN)) {            return __("You don't have Admin rights for this module", $dom);        }        if (!Loader::loadClassFromModule ('Newsletter', 'newsletter_util', false, false, '')) {            return __("Unable to load class [newsletter_util]", $dom);        }        $render = Zikula_View::getInstance('Newsletter', false);        $render->assign('preferences', ModUtil::getVar('Newsletter'));        return $render->fetch('admin/main.tpl');    }    public function settings()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::modifyconfig', '::', ACCESS_ADMIN)) {            return __("You don't have Admin rights for this module", $dom);        }        if (!Loader::loadClassFromModule ('Newsletter', 'newsletter_util', false, false, '')) {            return __("Unable to load class [newsletter_util]", $dom);        }        $preferences = ModUtil::getVar('Newsletter');        $view = Zikula_View::getInstance('Newsletter', false);        $view->assign('preferences', $preferences);        $view->assign('last_execution_time', ModUtil::getVar('Newsletter','end_execution_time') - ModUtil::getVar('Newsletter','start_execution_time'));        $view->assign('last_execution_count', ModUtil::getVar('Newsletter','end_execution_count', 0));        return $view->fetch('admin/modifyconfig.tpl');    }    public function view()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return LogUtil::registerError(__("You don't have Admin rights for this module", $dom), null, $url);        }        $dPagesize = ModUtil::getVar ('Newsletter', 'pagesize', 25);        $filter    = FormUtil::getPassedValue ('filter', array(), 'GETPOST');        $format    = FormUtil::getPassedValue ('format', null, 'GETPOST');        $ot        = FormUtil::getPassedValue ('ot', null, 'GETPOST');        $otTarget  = FormUtil::getPassedValue ('otTarget', null, 'GETPOST');        $offset    = FormUtil::getPassedValue ('startnum', 0, 'GETPOST');        $sort      = FormUtil::getPassedValue ('sort', null, 'GETPOST');        $url       = ModUtil::url('Newsletter', 'user', 'view', array('ot' => $ot));        $pagesize  = FormUtil::getPassedValue ('pagesize', SessionUtil::getVar('pagesize', $dPagesize, '/Newsletter'));        if ($sort) {            $filter['sort'] = $sort;        }        if (isset($filter['sort']) && $filter['sort']) {            // reverse sort order if we sort on the same field again            $sort    = $filter['sort'];            $oldSort = SessionUtil::getVar ('oldSort', $sort, '/Newsletter');            $oldOt   = SessionUtil::getVar ('oldOt', $sort, '/Newsletter');            if ($ot == $oldOt && $sort == $oldSort && strpos ($sort, 'DESC')===false) {                $sort .= ' DESC';            }        }        if (!$sort) {            $sort = 'cr_date DESC';        }        SessionUtil::setVar('oldSort', $sort, '/Newsletter');        SessionUtil::setVar('oldOt', $ot, '/Newsletter');        SessionUtil::setVar('pagesize', $pagesize, '/Newsletter');        if (!Loader::loadClassFromModule ('Newsletter', 'newsletter_util', false, false, '')) {            return LogUtil::registerError(__('Unable to load class [newsletter_util]', $dom), null, $url);        }        $view = Zikula_View::getInstance('Newsletter', false);        $view->assign('ot', $ot);        $data = array();        if ($ot) {            if (($class = Loader::loadArrayClassFromModule('Newsletter', $ot))) {                $objectArray = new $class ();                if (method_exists($objectArray, 'cleanFilter')) {                    $filter = $objectArray->cleanFilter($filter);                }                $where = $objectArray->genFilter($filter);                $sort  = $sort ? $sort : $objectArray->_objSort;                $data  = $objectArray->get ($where, $sort, $offset, $pagesize);                $pager = array();                $pager['numitems']     = $objectArray->getCount ($where, true);                $pager['itemsperpage'] = $pagesize;                $view->assign('startnum', $offset);                $view->assign('pager', $pager);                $view->assign('startpage', false);            }        }        $view->assign('objectArray', $data);        if ($ot == 'user') {            $view->assign('filter', $filter);        }        //EM Start        if ($ot == 'plugin') {            if (method_exists($objectArray, 'getPluginsParameters')) {                $view->assign('plugin_parameters', $objectArray->getPluginsParameters());            }        }        //EM End        if ($ot == 'show_preview') {            switch ($format) {                case 1:                    $content = $view->fetch('output_templates/text.tpl');                    $content = str_replace(array("\n", "\r"), '<br />', $content);                    break;                case 2:                    $content = $view->fetch('output_templates/html.tpl');                    break;                case 3:                    $content = $view->fetch('output_templates/text_with_link.tpl');                    $content = str_replace(array("\n", "\r"), '<br />', $content);                    break;                default:                    $content = 'Invalid format [$format] specified...';            }            $testsend = FormUtil::getPassedValue('testsend', 0, 'POST');            $testsendEmail = FormUtil::getPassedValue('testsend_email', 0, 'POST');            if ($testsend) {                $rc = true;                if (!$testsendEmail) {                    $rc = LogUtil::registerError(__('Your test email was not sent since you did not enter an email address', $dom));                }                if (!System::varValidate($testsendEmail, 'email')) {                    $rc = LogUtil::registerError(__('The email address you entered does not seem to be valid', $dom));                }                if (!Loader::loadClassFromModule('Newsletter', 'newsletter_send')) {                    $rc = LogUtil::registerError(__('Unable to load class [newsletter_send]', $dom), null, $url);                }                if ($rc) {                    $sendObj = new PNNewsletterSend();                    if ($sendObj->save()) {                        LogUtil::registerStatus(_NEWSLETTER_EMAIL_SUCCESS);                    } else {                        LogUtil::registerError(__('Failure sending the test email', $dom));                    }                }            }            echo $content;            exit;        }        $template = 'admin/view_' . $ot . '.tpl';        return $view->fetch($template);    }    public function edit()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return LogUtil::registerError(__("You don't have Admin rights for this module", $dom), null, $url);        }        $ot  = FormUtil::getPassedValue('ot', 'user', 'GETPOST');        $id  = (int)FormUtil::getPassedValue('id', 0, 'GETPOST');        $url = ModUtil::url('Newsletter', 'admin', 'main');        if (!Loader::loadClassFromModule('Newsletter', 'newsletter_util', false, false, '')) {            return LogUtil::registerError(__('Unable to load class [newsletter_util]', $dom), null, $url);        }        if (!($class = Loader::loadClassFromModule('Newsletter', $ot))) {            return LogUtil::registerError(__("Unable to load class for [$ot]", $dom), null, $url);        }        $object = new $class();        if ($id) {            $data = $object->get($id);            if (!$data) {                $url = ModUtil::url('Newsletter', 'admin', 'view', array('ot' => $ot));                return LogUtil::registerError(__("Unable to retrieve object of type [$ot] with id [$id]", $dom), null, $url);            }        } else {            $data = array();        }        $view = Zikula_View::getInstance('Newsletter', false);        $view->assign('ot', $ot);        $view->assign($ot, $data);        $view->assign('validation', $object->getValidation());        $tpl = 'admin/admin_form_' . $ot . '.tpl';        return $view->fetch($tpl);    }    public function save()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return LogUtil::registerError(__("You don't have Admin rights for this module", $dom), null, $url);        }        $ot  = FormUtil::getPassedValue('ot', 'user', 'GETPOST');        $id  = (int)FormUtil::getPassedValue('id', 0, 'GETPOST');        $url = ModUtil::url('Newsletter', 'admin', 'main');        if (!Loader::loadClassFromModule('Newsletter', 'newsletter_util', false, false, '')) {            return LogUtil::registerError(__('Unable to load class [newsletter_util]', $dom), null, $url);        }        if (!($class = Loader::loadClassFromModule('Newsletter', $ot))) {            return LogUtil::registerError(__("Unable to load class for [$ot]", $dom), null, $url);        }        $object = new $class();        if ($id) {            $data = $object->get($id);        }        $object->save();        return System::redirect(ModUtil::url('Newsletter', 'admin', 'view', array('ot' => $ot)));    }    public function archive()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return LogUtil::registerError(__("You don't have Admin rights for this module", $dom), null, $url);        }        if (!SecurityUtil::checkPermission('Newsletter::modifyarchive', '::', ACCESS_ADMIN)) {            return LogUtil::registerPermissionError();        }        if (!Loader::loadClassFromModule ('Newsletter', 'newsletter_util', false, false, '')) {            return LogUtil::registerError(__('Unable to load class [newsletter_util]', $dom));        }        $preferences_archive = ModUtil::getVar('Newsletter');        $view = Zikula_View::getInstance('Newsletter', false);        $view->assign('preferences_archive', $preferences_archive);        $view->assign('last_execution_time', ModUtil::getVar('Newsletter','end_execution_time') - ModUtil::getVar('Newsletter','start_execution_time'));        $view->assign('last_execution_count', ModUtil::getVar('Newsletter','end_execution_count', 0));        return $view->fetch('admin/modifyarchive.tpl');    }    public function archive_edit()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return LogUtil::registerPermissionError();        }        $ot  = 'user';        $id  = (int)FormUtil::getPassedValue ('id', 0, 'GETPOST');        $url = ModUtil::url('Newsletter', 'admin', 'main');        if (!Loader::loadClassFromModule ('Newsletter', 'newsletter_util', false, false, '')) {            return LogUtil::registerError(__('Unable to load class [newsletter_util]', $dom), null, $url);        }        if (!($class = Loader::loadClassFromModule ('Newsletter', $ot))) {            return LogUtil::registerError(__('Unable to load class for [$ot]', $dom), null, $url);        }        $object = new $class ();        if ($id) {            $data = $object->get ($id);            if (!$data) {                $url = ModUtil::url('Newsletter', 'admin', 'view', array('ot' => $ot));                return LogUtil::registerError(__("Unable to retrieve object of type [$ot] with id [$id]", $dom), null, $url);            }        } else {            $data = array();        }        $view = Zikula_View::getInstance('Newsletter', false);        $view->assign('ot', $ot);        $view->assign($ot, $data);        $view->assign('validation', $object->getValidation());        return $view->fetch("admin/admin_form_{$ot}.tpl");    }    public function modifyconfig()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return DataUtil::formatForDisplayHTML(__("You don't have Admin rights for this module", $dom));        }        $url = ModUtil::url('Newsletter', 'admin', 'settings');        if (!SecurityUtil::confirmAuthKey('Newsletter')) {            return LogUtil::registerAuthidError($url);        }        $prefs = FormUtil::getPassedValue('preferences', array(), 'POST');        if ($prefs['limit_type'] && $prefs['default_type'] != $prefs['limit_type']) {            $prefs['default_type'] = $prefs['limit_type'];            LogUtil::registerError(__('You have selected to limit the type of newsletter subscriptions but have chosen a different default newsletter type. Your default newsletter type has been set to the value you have selected to limit subscriptions to. Please review your settings!', $dom));        }        ModUtil::setVar('Newsletter', 'admin_key',                  $prefs['admin_key']                  ? $prefs['admin_key'] : substr(md5(time()),-10));        ModUtil::setVar('Newsletter', 'allow_anon_registration',    $prefs['allow_anon_registration']    ? 1 : 0);        ModUtil::setVar('Newsletter', 'allow_frequency_change',     $prefs['allow_frequency_change']     ? 1 : 0);        ModUtil::setVar('Newsletter', 'allow_subscription_change',  $prefs['allow_subscription_change']  ? 1 : 0);        ModUtil::setVar('Newsletter', 'archive_expire',             $prefs['archive_expire']             ? $prefs['archive_expire'] : 0);        ModUtil::setVar('Newsletter', 'auto_approve_registrations', $prefs['auto_approve_registrations'] ? 1 : 0);        ModUtil::setVar('Newsletter', 'default_frequency',          $prefs['default_frequency']          ? $prefs['default_frequency'] : 0);        ModUtil::setVar('Newsletter', 'default_type',               $prefs['default_type']               ? $prefs['default_type'] : 1);        ModUtil::setVar('Newsletter', 'enable_multilingual',        $prefs['enable_multilingual']        ? 1 : 0);        ModUtil::setVar('Newsletter', 'itemsperpage',               $prefs['itemsperpage']               ? $prefs['itemsperpage'] : 25);        ModUtil::setVar('Newsletter', 'limit_type',                 $prefs['limit_type']);        ModUtil::setVar('Newsletter', 'max_send_per_hour',          $prefs['max_send_per_hour'] >= 0     ? $prefs['max_send_per_hour'] : 0);        ModUtil::setVar('Newsletter', 'notify_admin',               $prefs['notify_admin']               ? 1 : 0);        ModUtil::setVar('Newsletter', 'require_tos',                $prefs['require_tos']                ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_approval_status',       $prefs['show_approval_status']       ? 1 : 0);        ModUtil::setVar('Newsletter', 'disable_auto',               $prefs['disable_auto']               ? 1 : 0);        ModUtil::setVar('Newsletter', 'activate_archive',           $prefs['activate_archive']           ? 1 : 0);        ModUtil::setVar('Newsletter', 'personalize_email',          $prefs['personalize_email']          ? 1 : 0);        ModUtil::setVar('Newsletter', 'send_day',                   $prefs['send_day']                   ? $prefs['send_day']           : 5);        ModUtil::setVar('Newsletter', 'send_from_address',          $prefs['send_from_address']          ? $prefs['send_from_address']  : System::getVar('adminmail'));        ModUtil::setVar('Newsletter', 'newsletter_subject',         $prefs['newsletter_subject']         ? $prefs['newsletter_subject'] : 0);        ModUtil::setVar('Newsletter', 'send_per_request',           $prefs['send_per_request'] >= 0      ? $prefs['send_per_request']   : 5);        return System::redirect($url);    }    public function delete()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return DataUtil::formatForDisplayHTML(__("You don't have Admin rights for this module", $dom));        }        $ot  = 'user';        $id  = (int)FormUtil::getPassedValue('id', null, 'GETPOST');        $url = ModUtil::url('Newsletter', 'admin', 'view', array('ot' => $ot));        if (!$id) {            return LogUtil::registerError(__('Invalid [id] parameter received', $dom), null, $url);        }        if (!SecurityUtil::confirmAuthKey('Newsletter')) {            return LogUtil::registerAuthidError($url);        }        if (!($class = Loader::loadClassFromModule ('Newsletter', $ot))) {            return LogUtil::registerError(__("Unable to load class [$ot]", $dom), null, $url);        }        $object = new $class();        $data   = $object->get($id);        if (!$data) {            return LogUtil::registerError(__("Unable to retrieve object of type [$ot] with id [$id]", $dom), null, $url);        }        $object->delete ();        return System::redirect($url);    }    public function modifyarchive()    {        $dom = ZLanguage::getModuleDomain('Newsletter');        if (!SecurityUtil::checkPermission('Newsletter::', '::', ACCESS_ADMIN)) {            return DataUtil::formatForDisplayHTML(__("You don't have Admin rights for this module", $dom));        }        $url = ModUtil::url('Newsletter', 'admin', 'archive');        if (!SecurityUtil::confirmAuthKey('Newsletter')) {            return LogUtil::registerAuthidError($url);        }        $prefs = FormUtil::getPassedValue('preferences_archive', array(), 'POST');        if ($prefs['limit_type'] && $prefs['default_type'] != $prefs['limit_type']) {            $prefs['default_type'] = $prefs['limit_type'];            LogUtil::registerError(__('You have selected to limit the type of newsletter subscriptions but have chosen a different default newsletter type. Your default newsletter type has been set to the value you have selected to limit subscriptions to. Please review your settings!', $dom));        }        ModUtil::setVar('Newsletter', 'show_archive',   $prefs['show_archive']   ? 1 : 0);        ModUtil::setVar('Newsletter', 'create_archive', $prefs['create_archive'] ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_id',        $prefs['show_id']        ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_lang',      $prefs['show_lang']      ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_objects',   $prefs['show_objects']   ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_plugins',   $prefs['show_plugins']   ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_size',      $prefs['show_size']      ? 1 : 0);        ModUtil::setVar('Newsletter', 'show_date',      $prefs['show_date']      ? 1 : 0);        return System::redirect($url);    }}